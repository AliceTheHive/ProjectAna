<Window x:Class="ANAConversationStudio.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:VM="clr-namespace:ANAConversationStudio.ViewModels"
    xmlns:Controls="clr-namespace:ANAConversationStudio.Controls"
    xmlns:UC="clr-namespace:ANAConversationStudio.UserControls"
    xmlns:NetworkUI="clr-namespace:NetworkUI;assembly=NetworkUI"
    xmlns:avalonDock="http://schemas.xceed.com/wpf/xaml/avalondock"
    xmlns:UI="clr-namespace:ANAConversationStudio.UIHelpers"
    xmlns:Helpers="clr-namespace:ANAConversationStudio.Helpers"
    xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:ZoomAndPan="clr-namespace:ZoomAndPan;assembly=ZoomAndPan"
    xmlns:ac="clr-namespace:AdornedControl;assembly=AdornedControl"
    Title="ANA Conversation Studio" 
    x:Name="mainWindow"
    MinWidth="400"
    MinHeight="150"
	Width="1366"
    Height="768"
    Closing="MainWindow_Closing"
	Loaded="MainWindow_Loaded"
    FocusManager.FocusedElement="{Binding ElementName=networkControl}" Icon="/ANAConversationStudio;component/favicon.ico" WindowState="Maximized"
    >

    <!-- 
    Including this in binding statements for diagnostics:
    diagnostics:PresentationTraceSources.TraceLevel=High
    -->

    <Window.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- 
                Merge in the resource dictionary that is shared between the main window and the overview window.
                -->
                <ResourceDictionary Source="/Styles/SharedVisualTemplates.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <!-- UI commands. -->

            <RoutedUICommand x:Key="Commands.DeleteSelectedNodes" />
            <RoutedUICommand x:Key="Commands.CreateNode" />
            <RoutedUICommand x:Key="Commands.DeleteNode" />
            <RoutedUICommand x:Key="Commands.CloneNode" />
            <RoutedUICommand x:Key="Commands.DeleteConnection" />
            <RoutedUICommand x:Key="Commands.ZoomOut" />
            <RoutedUICommand x:Key="Commands.ZoomIn" />
            <RoutedUICommand x:Key="Commands.JumpBackToPrevZoom" />
            <RoutedUICommand x:Key="Commands.FitContent" />
            <RoutedUICommand x:Key="Commands.Fill" />
            <RoutedUICommand x:Key="Commands.OneHundredPercent" />
            <RoutedUICommand x:Key="Commands.Save" />
            <RoutedUICommand x:Key="Commands.PrevNode" />
            <RoutedUICommand x:Key="Commands.NextNode" />
            <RoutedUICommand x:Key="Commands.StartInSimulator" />

            <!-- 
            This converts from a scale value to a percentage value.
            It is used to convert the value of 'ContentScale' to the percentage zoom level that is displayed in the UI.
            -->
            <UI:ScaleToPercentConverter 
                x:Key="scaleToPercentConverter" 
                />

            <!-- 
            This graphic is used to indicate that a connection cannot be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type VM:ConnectionBadIndicator}">
                <Grid
                    Width="80"
                    >
                    <Image 
                        Width="32"
                        Height="32"
                        Source="/Resources/block_16.png"
                        HorizontalAlignment="Right"
                        />
                </Grid>
            </DataTemplate>

            <!-- 
            This graphic is used to indicate that a connection can be made between two particular connectors.        
            -->
            <DataTemplate DataType="{x:Type VM:ConnectionOkIndicator}">
                <Grid
                    Width="80"
                    >
                    <Image 
                        Width="32"
                        Height="32"
                        Source="/Resources/tick_16.png"
                        HorizontalAlignment="Right"
                        />
                </Grid>
            </DataTemplate>

            <!-- 
            Define the visual style for a 'ConnectorItem'.
            -->
            <Style 
                TargetType="{x:Type NetworkUI:ConnectorItem}"
                >
                <!-- 
                Data-binding for the connector hotspot.
                ConnectorItem automatically computes its center points and assings this value
                to the 'Hotspot' property.  This data-binding then 'pushes' the value into the application
                view-model.
                -->
                <Setter 
                    Property="Hotspot"
                    Value="{Binding Hotspot, Mode=OneWayToSource}"
                    />

                <!-- The visual template. -->
                <Setter 
                    Property="Template"
                    >
                    <Setter.Value>
                        <ControlTemplate 
                            TargetType="{x:Type NetworkUI:ConnectorItem}"
                            >
                            <!-- The visual for the connector. -->
                            <Ellipse
                                Stroke="{StaticResource nodeBorderBrush}"
                                Fill="{StaticResource connectorBackgroundBrush}"
                                />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- 
            Template for the button that is used to delete nodes and connections in the graph.
            This button is displayed in an adorner when the user hovers the mouse over a node or connection.
            -->
            <ControlTemplate 
                x:Key="deleteButtonTemplate"
                TargetType="{x:Type Button}"
                >
                <Grid
                    x:Name="grid"
                    >
                    <Grid.RenderTransform>
                        <ScaleTransform
                            ScaleX="1"
                            ScaleY="1"
                            CenterX="10"
                            CenterY="10"
                            />
                    </Grid.RenderTransform>
                    <!--<Ellipse
                        x:Name="shadow"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Fill="Gray"
                        >
                        <Ellipse.RenderTransform>
                            <TranslateTransform
                                X="1.5"
                                Y="1.5"
                                />
                        </Ellipse.RenderTransform>
                    </Ellipse>-->
                    <!--<Ellipse
                        x:Name="ellipse"
                        Stroke="Black"
                        VerticalAlignment="Stretch"
                        HorizontalAlignment="Stretch"
                        Fill="White"
                        />-->
                    <Border CornerRadius="100" Background="{StaticResource nodeHeaderBorderBrush}" Cursor="Hand">
                        <TextBlock Text="&#xE10A;" Foreground="White" FontFamily="Segoe UI Symbol" HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center" FontWeight="Light"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <EventTrigger
                        RoutedEvent="Mouse.MouseEnter"
                        >
                        <!-- 
                        Make the 'delete connection button' larger when the mouse 
                        cursor is hovered over it.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1.3"
                                    Duration="0:0:0.25"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>

                    <EventTrigger
                        RoutedEvent="Mouse.MouseLeave"
                        >
                        <!-- 
                        Return the 'delete connection button' to normal size when the mouse
                        cursor is moved away.
                        -->
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleX"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                                <DoubleAnimation
                                    Storyboard.TargetName="grid"
                                    Storyboard.TargetProperty="RenderTransform.ScaleY"
                                    To="1"
                                    Duration="0:0:0.05"
                                    />
                            </Storyboard>
                        </BeginStoryboard>
                    </EventTrigger>
                </ControlTemplate.Triggers>

            </ControlTemplate>

            <!-- 
            Data-template for ConectionViewModel.
            
            Note that the 'Start' and 'End' of the arrow are bound to 'SourceConnectorHotspot' and 'DestConnectorHotspot' in 
            the view-model.

            In this sample a curved arrow represents connections between nodes.
            -->
            <DataTemplate
                DataType="{x:Type VM:ConnectionViewModel}"
                >

                <!-- 
                An adorned control is used, to represent the connection. 
                When the user hovers the mouse cursor over the connection, the 
                'delete connection' adorner pops up and allows them to delete the connection.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Mouse"
                    VerticalAdornerPlacement="Mouse"
                    IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}"
                    >

                    <!-- The connection is represented by a curved arrow. -->
                    <Controls:CurvedArrow
                        Stroke="{Binding SourceConnector.ParentNode.IsSelected, Converter={StaticResource SelectionToFillBrushConverter}}"
                        StrokeThickness="2"
                        Fill="{Binding SourceConnector.ParentNode.IsSelected, Converter={StaticResource SelectionToFillBrushConverter}}"
                        Points="{Binding Points}"
                        />

                    <ac:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the connection.
                        It displays a button that the user can click to delete the connection.
                        -->
                        <Canvas
                            x:Name="connectionAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30"
                            >
                            <Line
                                X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="{StaticResource nodeHeaderBorderBrush}"
                                StrokeThickness="1"
                                />
                            <Button
                                x:Name="deleteConnectionButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{StaticResource Commands.DeleteConnection}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource deleteButtonTemplate}"
                                />
                        </Canvas>
                    </ac:AdornedControl.AdornerContent>
                </ac:AdornedControl>
            </DataTemplate>

            <!-- Define a data-template for the 'NodeViewModel' class. -->
            <DataTemplate
                DataType="{x:Type VM:NodeViewModel}"
                >

                <!-- 
                An adorned control is used, to represent the node. 
                When the user hovers the mouse cursor over the node, the 
                'delete node' adorner pops up and allows them to delete the node.
                -->
                <ac:AdornedControl
                    HorizontalAdornerPlacement="Outside"
                    VerticalAdornerPlacement="Outside"
                    AdornerOffsetX="-12"
                    AdornerOffsetY="8"
                    Background="Transparent"
                    IsMouseOverShowEnabled="{Binding ElementName=networkControl, Path=IsNotDragging}"
                    >

                    <!-- The margin has been selected so that the selection rect nicely covers the entire node. -->

                    <Border
                        MinWidth="120"
                        Margin="10,6,10,6"
                        SizeChanged="Node_SizeChanged"
                        Background="{StaticResource nodeFillBrush}"
                        BorderThickness="1.3"
                        BorderBrush="{StaticResource nodeBorderBrush}"
                        CornerRadius="10"
                        >

                        <!-- This rectangle is the main visual for the node. -->

                        <!--<Rectangle
                            Stroke="{StaticResource nodeBorderBrush}"
                            StrokeThickness="1.3"
                            RadiusX="4"
                            RadiusY="4"
                            Fill="{StaticResource nodeFillBrush}"
                            />-->

                        <!-- 
                        This grid contains the node's connectors.
                        The margin is negative so that the connectors overlap the body of the node and it's selection border.
                        -->
                        <Grid Margin="-6,0,-6,-18">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" MinWidth="10" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <!-- spacer -->
                                <RowDefinition Height="2" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <Border 
                                CornerRadius="8"
                                Margin="6,0,6,0"
                                Background="{Binding IsSelected, Converter={StaticResource IsStartNodeToBrushConverter}}"
                                Grid.Column="0"
                                Grid.ColumnSpan="3"
                                Grid.Row="0">
                                <!-- The name of the node. -->
                                <Grid>
                                    <Grid Height="18" Background="{Binding IsSelected, Converter={StaticResource IsStartNodeToBrushConverter}}" VerticalAlignment="Bottom"/>
                                    <StackPanel
                                        Orientation="Horizontal"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"
                                        Margin="10,5,10,3">
                                        <TextBlock Margin="3" Foreground="White" Text="{Binding ChatNode.NodeType, Converter={StaticResource ButtonSectionTypeSymbolConverter}}" FontFamily="{StaticResource MDL2Assets}" VerticalAlignment="Center">
                                            <TextBlock.ToolTip>
                                                <TextBlock >
                                                    <Run Text="{Binding ChatNode.NodeType}"/><Run Text=" Node"/>
                                                </TextBlock>
                                            </TextBlock.ToolTip>
                                        </TextBlock>
                                        <TextBlock Text="{Binding ChatNode.Alias}" Foreground="White" Margin="3" VerticalAlignment="Center"/>
                                    </StackPanel>
                                </Grid>
                            </Border>

                            <!-- Displays the node's input connectors. -->
                            <ItemsControl
                                HorizontalAlignment="Center"
                                Opacity="1"
                                Grid.Row="0"
                                Margin="0,-10,0,0"
                                Grid.ColumnSpan="3"
                                ItemsSource="{Binding InputConnectors}"
                                ItemTemplate="{StaticResource inputConnectorTemplate}"
                                Focusable="False"
                                />

                            <ItemsControl Margin="30,10" HorizontalAlignment="Stretch" ItemsSource="{Binding ChatNode.Sections}" Grid.Row="2" HorizontalContentAlignment="Stretch" Grid.Column="1">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border BorderBrush="White" BorderThickness="0,0,0,0" HorizontalAlignment="Stretch" Padding="0,5,0,5">
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition/>
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <TextBlock Grid.Row="0" Text="{Binding SectionType, Converter={StaticResource ButtonSectionTypeSymbolConverter}}" FontFamily="{StaticResource MDL2Assets}" VerticalAlignment="Center" Margin="0,0,5,0" >
                                                    <TextBlock.ToolTip>
                                                        <TextBlock>
                                                            <Run Text="{Binding SectionType}"/><Run Text=" Section"/>
                                                        </TextBlock>
                                                    </TextBlock.ToolTip>
                                                </TextBlock>
                                                <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding Alias}" MaxWidth="250" TextWrapping="Wrap" Margin="0,0,5,0" ToolTip="{Binding Text}" Foreground="{StaticResource PrimaryHueDarkBrush}"/>
                                                <Border CornerRadius="2" BorderBrush="{StaticResource PrimaryHueDarkBrush}" Grid.ColumnSpan="2" Margin="0,5,0,0" BorderThickness="0,0.2" HorizontalAlignment="Stretch" Grid.Row="1"/>
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                            <!--<TextBox Text="&#xE26E;" FontFamily="Segoe UI Symbol"/>-->

                            <!-- Displays the node's output connectors. -->
                            <ItemsControl
                                HorizontalAlignment="Center"
                                VerticalAlignment="Bottom"
                                Margin="10,0,10,10"
                                Grid.Row="3"
                                Grid.Column="0"
                                Grid.ColumnSpan="5"
                                ItemsSource="{Binding OutputConnectors}"
                                ItemTemplate="{StaticResource outputConnectorTemplate}"
                                Focusable="False"
                                >
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Grid>
                    </Border>

                    <ac:AdornedControl.AdornerContent>

                        <!-- 
                        This is the adorner that pops up when the user hovers the mouse over the node.
                        It displays a button that the user can click to delete the node.
                        -->
                        <Canvas
                            x:Name="nodeAdornerCanvas"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Width="30"
                            Height="30"
                            >
                            <Line
                                X1="0"
                                Y1="30"
                                X2="15"
                                Y2="15"
                                Stroke="{StaticResource PrimaryHueDarkBrush}"
                                StrokeThickness="1"
                                />
                            <Button
                                x:Name="deleteNodeButton"
                                Canvas.Left="10"
                                Canvas.Top="0"
                                Width="20"
                                Height="20"
                                Cursor="Hand"
                                Focusable="False"
                                Command="{StaticResource Commands.DeleteNode}"
                                CommandParameter="{Binding}"
                                Template="{StaticResource deleteButtonTemplate}"
                                />
                        </Canvas>
                    </ac:AdornedControl.AdornerContent>
                </ac:AdornedControl>
            </DataTemplate>
            <Style TargetType="Menu" BasedOn="{StaticResource {x:Type Menu}}">
                <Setter Property="Padding" Value="0"/>
            </Style>
        </ResourceDictionary>

    </Window.Resources>

    <Window.InputBindings>
        <!-- Bind input to commands. -->
        <KeyBinding
			Key="Del"
			Command="{StaticResource Commands.DeleteSelectedNodes}"
			/>
        <KeyBinding
			Key="Minus"
            Modifiers="Ctrl"
			Command="{StaticResource Commands.ZoomOut}"
			/>
        <KeyBinding
			Key="Plus"
            Modifiers="Ctrl"
			Command="{StaticResource Commands.ZoomIn}"
			/>
        <KeyBinding
			Key="Backspace"
            Modifiers="Ctrl"
			Command="{StaticResource Commands.JumpBackToPrevZoom}"
			/>
        <KeyBinding
			Key="Space"
            Modifiers="Ctrl"
			Command="{StaticResource Commands.FitContent}"
			/>
        <KeyBinding
			Key="S"
            Modifiers="Ctrl"
			Command="{StaticResource Commands.Save}"
			/>
        <KeyBinding
			Key="C"
            Modifiers="Alt"
			Command="{StaticResource Commands.CloneNode}"
			/>
        <KeyBinding
			Key="OemComma"
            Modifiers="Ctrl"
			Command="{StaticResource Commands.PrevNode}"
			/>
        <KeyBinding
			Key="OemPeriod"
            Modifiers="Ctrl"
			Command="{StaticResource Commands.NextNode}"
			/>
        <KeyBinding
			Key="F5"
			Command="{StaticResource Commands.StartInSimulator}"
			/>
    </Window.InputBindings>

    <Window.CommandBindings>

        <!-- Bind commands to event handlers.-->

        <CommandBinding 
            Command="{StaticResource Commands.DeleteSelectedNodes}" 
            Executed="DeleteSelectedNodes_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.CreateNode}" 
            Executed="CreateNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteNode}" 
            Executed="DeleteNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.DeleteConnection}" 
            Executed="DeleteConnection_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomOut}" 
            Executed="ZoomOut_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.ZoomIn}" 
            Executed="ZoomIn_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.JumpBackToPrevZoom}" 
            Executed="JumpBackToPrevZoom_Executed" 
            CanExecute="JumpBackToPrevZoom_CanExecuted"
            />
        <CommandBinding 
            Command="{StaticResource Commands.FitContent}" 
            Executed="FitContent_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.Fill}" 
            Executed="Fill_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.OneHundredPercent}" 
            Executed="OneHundredPercent_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.Save}" 
            Executed="Save_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.CloneNode}" 
            Executed="CloneSelectedNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.NextNode}" 
            Executed="NextNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.PrevNode}" 
            Executed="PrevNode_Executed" 
            />
        <CommandBinding 
            Command="{StaticResource Commands.StartInSimulator}" 
            Executed="StartInSimulator_Executed" 
            />
    </Window.CommandBindings>

    <Window.ContextMenu>
        <ContextMenu>
            <MenuItem
                Header="Create Node"
                Command="{StaticResource Commands.CreateNode}"
                ToolTip="Creates a new node"
                IsEnabled="{Binding CurrentStudioContext, Converter={StaticResource N2B}}"
                />

            <Separator />

            <MenuItem
                Header="Fit"
                Command="{StaticResource Commands.FitContent}"
                ToolTip="Fit selected nodes to the viewport, when nothing is selected fits all nodes to the viewport"
                />
            <MenuItem
                Header="Fill"
                Command="{StaticResource Commands.Fill}"
                ToolTip="Fit the entire content area to the viewport"
                />
            <MenuItem
                Header="100%"
                Command="{StaticResource Commands.OneHundredPercent}"
                ToolTip="Scale the content to 100%"
                />
            <MenuItem
                Header="Previous Zoom"
                Command="{StaticResource Commands.JumpBackToPrevZoom}"
                ToolTip="Return to the previous zoom level"
                />

            <Separator />

            <MenuItem
                Header="Zoom Out"
                Command="{StaticResource Commands.ZoomOut}"
                ToolTip="Zooms out from the canvas"
                />
            <MenuItem
                    Header="Zoom In"
                    Command="{StaticResource Commands.ZoomOut}"
                    ToolTip="Zooms in on the canvas"
                    />

        </ContextMenu>
    </Window.ContextMenu>

    <Window.DataContext>
        <VM:MainWindowViewModel />
    </Window.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Border Grid.Row="0" BorderBrush="{StaticResource PrimaryHueLightBrush}" BorderThickness="0,0,0,1"  HorizontalAlignment="Stretch" VerticalAlignment="Top" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Menu Foreground="{StaticResource FileMenuForegroundBrush}" x:Name="menu" >
                    <MenuItem Header="File" x:Name="FileMenu" Height="30">
                        <MenuItem Header="New Chat Flow" Click="NewChatFlowClick" IsEnabled="{Binding CurrentStudioContext, Converter={StaticResource N2B}}"/>
                        <MenuItem Header="Open Chat Flow" HorizontalContentAlignment="Left" ItemsSource="{Binding CurrentStudioContext.ChatFlowProjects}" IsEnabled="{Binding CurrentStudioContext.ChatFlowProjects, FallbackValue=false, Converter={StaticResource N2B}}">
                            <MenuItem.ItemTemplate>
                                <DataTemplate>
                                    <MenuItem Header="{Binding}" HorizontalContentAlignment="Left" HorizontalAlignment="Left" Tag="{Binding}" Click="LoadProjectClick"/>
                                </DataTemplate>
                            </MenuItem.ItemTemplate>
                        </MenuItem>
                        <MenuItem Header="Manage Chat Flows" Click="ManageChatFlowsClick" IsEnabled="{Binding CurrentStudioContext, Converter={StaticResource N2B}}"/>
                        <MenuItem Header="Manage Chat Servers" Click="ManageChatServersClick"/>
                        <MenuItem Header="Export as image" Click="ExportAsImageClick" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}"/>
                        <MenuItem Header="Settings" Click="SettingsClick"/>
                        <MenuItem Header="Exit" Click="ExitClick"/>
                    </MenuItem>
                    <MenuItem Header="Tools" Height="30">
                        <MenuItem Header="Launch Current Chat in Simulator (F5)" Click="ConvSimWithChatMenuClick" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}"/>
                        <MenuItem Header="Copy Chat URL" Click="CopyChatURLClick" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}"/>
                        <MenuItem Header="Copy Project Id" Click="CopyProjectIdClick" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}"/>
                    </MenuItem>
                    <MenuItem Header="Help" Name="HelpMenu" Height="30">
                        <MenuItem Header="No Update Available!" Click="UpdateMenuClick" IsEnabled="False" Name="UpdateMenuItem"/>
                    </MenuItem>
                </Menu>
                <Grid Grid.Column="1" Margin="0,0,20,0">
                    <toolkit:WatermarkTextBox VerticalAlignment="Center" Watermark="Search nodes" Width="200" KeyUp="SearchTextboxKeyUp" GotFocus="SearchTextboxGotFocus" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}" />
                    <Popup IsOpen="{Binding SearchResults, Converter={StaticResource N2B}}" MaxHeight="400" MaxWidth="300">
                        <ListBox x:Name="SearchResultsListBox" Background="White" BorderThickness="1,1,1,0" BorderBrush="{StaticResource PrimaryHueDarkBrush}" ItemsSource="{Binding SearchResults}" SelectionChanged="SearchResultSelectedChanged">
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="Margin" Value="0"/>
                                    <Setter Property="Padding" Value="10"/>
                                    <Setter Property="BorderBrush" Value="{StaticResource PrimaryHueDarkBrush}" />
                                    <Setter Property="BorderThickness" Value="0,0,0,1" />
                                </Style>
                            </ListBox.ItemContainerStyle>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel>
                                        <TextBlock TextWrapping="Wrap" Visibility="{Binding NodeText, Converter={StaticResource N2V}}">
                                            <Run FontStyle="Italic" Text="Node: "/><Run Text="{Binding NodeText}"/>
                                        </TextBlock>
                                        <TextBlock TextWrapping="Wrap" Visibility="{Binding SectionText, Converter={StaticResource N2V}}">
                                            <Run FontStyle="Italic" Text="Section: "/><Run Text="{Binding SectionText}"/>
                                        </TextBlock>
                                        <TextBlock TextWrapping="Wrap" Visibility="{Binding ButtonText, Converter={StaticResource N2V}}">
                                            <Run FontStyle="Italic" Text="Button: "/><Run Text="{Binding ButtonText}"/>
                                        </TextBlock>
                                        <TextBlock TextWrapping="Wrap" Foreground="Gray" Visibility="{Binding NoResults, Converter={StaticResource B2V}}">
                                            <Run FontStyle="Italic" Text="No results"/>
                                        </TextBlock>
                                    </StackPanel>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Popup>
                </Grid>
            </Grid>
        </Border>
        <avalonDock:DockingManager Grid.Row="1" x:Name="dockingManager" >
            <avalonDock:LayoutRoot>
                <avalonDock:LayoutPanel>
                    <avalonDock:LayoutDocumentPane>
                        <avalonDock:LayoutDocument ContentId="NodeNetworkView" Title=" Chat Flow " CanClose="False" CanFloat="False">
                            <DockPanel Grid.Row="1" >
                                <Grid Margin="5,5,5,5" DockPanel.Dock="Bottom">
                                    <Grid.Resources>
                                        <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                            <Setter Property="Padding" Value="10,0"/>
                                        </Style>
                                    </Grid.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <Button Padding="20,0" Grid.Column="0" Click="SaveButtonClick" ToolTip="Save changes (Ctrl+S)" Content="Save" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}" Background="{StaticResource ANAGreenBrush}" BorderBrush="{StaticResource ANAGreenBrush}"/>
                                    <Button Padding="20,0" Grid.Column="1" Click="ValidateButtonClick" ToolTip="Validate chat flow" Content="Validate" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}" HorizontalAlignment="Left" Margin="10,0"/>
                                    <TextBlock x:Name="SaveStatusTextBlock" Text="" VerticalAlignment="Center" Margin="5,4" Grid.Column="2" ToolTip="{Binding Text, ElementName=SaveStatusTextBlock}"/>
                                    <ItemsControl Grid.Column="3">
                                        <ItemsControl.Resources>
                                            <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
                                                <Setter Property="Padding" Value="10,0" />
                                                <Setter Property="Margin" Value="5,0" />
                                            </Style>
                                        </ItemsControl.Resources>
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <VirtualizingStackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                        <Button  Command="{StaticResource Commands.PrevNode}" ToolTip="Jump to previous node in the flow (Ctrl + &lt;)" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}">
                                            <TextBlock>
                                                <Run Text="&#xE96F;" FontFamily="{StaticResource MDL2Assets}" FontSize="10"/>
                                                <Run Text="Previous Node"/>
                                            </TextBlock>
                                        </Button>
                                        <Button  Command="{StaticResource Commands.NextNode}" ToolTip="Jump to next node in the flow (Ctrl + &gt;)" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}">
                                            <TextBlock>
                                                <Run Text="Next Node"/>
                                                <Run Text="&#xE970;" FontFamily="{StaticResource MDL2Assets}" FontSize="10"/>
                                            </TextBlock>
                                        </Button>
                                        <Button Content="Clone Node"  Click="CloneSelectedNodeClick" ToolTip="Create a deep copy of the node along with content (Alt+C)" IsEnabled="{Binding CurrentStudioContext.ChatFlow, FallbackValue=false, Converter={StaticResource N2B}}"/>
                                        <Button Grid.Column="4"  Command="{StaticResource Commands.FitContent}" ToolTip="Fit all nodes to the viewport">Fit</Button>
                                        <Button Grid.Column="6" Command="{StaticResource Commands.Fill}" ToolTip="Fit the entire content area to the viewport" >
                                            Full board
                                        </Button>
                                    </ItemsControl>
                                    <StackPanel Grid.Column="4" Orientation="Horizontal">
                                        <TextBlock Width="40" TextAlignment="Center" VerticalAlignment="Center" Margin="0,0,4,0" HorizontalAlignment="Center">
                                            <Run Text="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource scaleToPercentConverter}}"/>%
                                        </TextBlock>
                                        <Button Padding="10,0" Width="30" Command="{StaticResource Commands.ZoomOut}" ToolTip="Zoom out from the content">-</Button>
                                        <Slider
                                            Width="100"
                                            Margin="10,0"
                Minimum="10" 
                LargeChange="20" 
                TickFrequency="10" 
                Maximum="200" 
                SmallChange="10" 
                TickPlacement="TopLeft"
                Value="{Binding ElementName=zoomAndPanControl, Path=ContentScale, Converter={StaticResource scaleToPercentConverter}}"
                ToolTip="Change the zoom level of the content"
                />
                                        <Button Padding="10,0" Width="30" Command="{StaticResource Commands.ZoomIn}" ToolTip="Zoom in on the content">+</Button>
                                    </StackPanel>
                                </Grid>
                                <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Visible" HorizontalScrollBarVisibility="Visible" Focusable="False">
                                    <!-- 
            The ZoomAndPanControl displays the NetworkView as its content.
            We can use the mouse to zoom and pan about the NetworkView.
            -->
                                    <ZoomAndPan:ZoomAndPanControl
                x:Name="zoomAndPanControl"
                ContentScale="{Binding ContentScale, Mode=TwoWay}"
                ContentOffsetX="{Binding ContentOffsetX, Mode=TwoWay}"
                ContentOffsetY="{Binding ContentOffsetY, Mode=TwoWay}"
                ContentViewportWidth="{Binding ContentViewportWidth, Mode=OneWayToSource}"
                ContentViewportHeight="{Binding ContentViewportHeight, Mode=OneWayToSource}"
                Focusable="False"
                >
                                        <!--
                We need to nest our NetworkView in an AdornerDecorator so that adorners work correct when
                we zoom in and out using the ZoomAndPanControl
                -->
                                        <AdornerDecorator>
                                            <!--
                    This grid specifies the size of the ZoomAndPanControl's content.
                    It wraps up both the NetworkView and drag-zooming Canvas.
                    -->
                                            <!--Width="10000"
                        Height="10000"-->
                                            <!--Width="{Binding ContentWidth}"
                        Height="{Binding ContentHeight}"-->
                                            <Grid
                        Width="10000"
                        Height="10000"
                        Background="{StaticResource GridlinesVBrush}"
                        >
                                                <!-- In this sample the NetworkView is the content displayed by the ZoomAndPanControl. -->
                                                <NetworkUI:NetworkView
                            x:Name="networkControl"
                            Background="Transparent"
                            NodesSource="{Binding Network.Nodes}"
                            ConnectionsSource="{Binding Path=Network.Connections}"
                            ConnectionDragStarted="networkControl_ConnectionDragStarted"
                            QueryConnectionFeedback="networkControl_QueryConnectionFeedback"
                            ConnectionDragging="networkControl_ConnectionDragging"                            
                            ConnectionDragCompleted="networkControl_ConnectionDragCompleted"
                            MouseDown="networkControl_MouseDown"
                            MouseUp="networkControl_MouseUp"
                            MouseMove="networkControl_MouseMove"
                            MouseWheel="networkControl_MouseWheel"
                            MouseDoubleClick="networkControl_MouseDoubleClick"
                            SelectionChanged="networkControl_SelectionChanged"                
                            />
                                                <!--
                        This Canvas and Border are used as a very simple way to render a drag rectangle that the user
                        uses to specify an area to zoom in on.
                        -->
                                                <Canvas
                            x:Name="dragZoomCanvas"
                            Visibility="Collapsed"
                            >
                                                    <Border 
                                x:Name="dragZoomBorder"
                                BorderBrush="Black"
                                BorderThickness="1"
                                Background="Silver"
                                CornerRadius="1"
                                Opacity="0"
                                />
                                                </Canvas>



                                            </Grid>
                                        </AdornerDecorator>
                                    </ZoomAndPan:ZoomAndPanControl>
                                </ScrollViewer>
                            </DockPanel>
                        </avalonDock:LayoutDocument>
                    </avalonDock:LayoutDocumentPane>
                    <avalonDock:LayoutAnchorablePane DockWidth="400" IsMaximized="False" x:Name="NodeEditorLayoutAnchorablePane" >
                        <avalonDock:LayoutAnchorable AutoHideMinWidth="400" ContentId="NodeEditorLayoutAnchorable" x:Name="NodeEditorLayoutAnchorable" Title="Node Editor" CanHide="False" CanClose="False">
                            <UC:NodeEditorUserControl x:Name="NodeEditor" />
                        </avalonDock:LayoutAnchorable>
                    </avalonDock:LayoutAnchorablePane>
                </avalonDock:LayoutPanel>
                <avalonDock:LayoutRoot.BottomSide>
                    <avalonDock:LayoutAnchorSide>
                        <avalonDock:LayoutAnchorGroup>
                            <avalonDock:LayoutAnchorable  ContentId="ErrorsWindowAnchorable" x:Name="ErrorsWindowAnchorable" Title=" Errors and Warnings" CanHide="False" CanClose="False">
                                <Grid>
                                    <Grid.Resources>
                                        <Style TargetType="TextBox">
                                            <Setter Property="BorderBrush" Value="Transparent" />
                                            <Setter Property="BorderThickness" Value="0" />
                                            <Setter Property="Padding" Value="5" />
                                            <Setter Property="VerticalAlignment" Value="Stretch" />
                                            <Setter Property="HorizontalAlignment" Value="Stretch" />
                                            <Setter Property="Background" Value="White" />
                                            <Setter Property="IsReadOnly" Value="True" />
                                            <Setter Property="IsReadOnlyCaretVisible" Value="True" />
                                            <Setter Property="TextWrapping" Value="NoWrap"/>
                                        </Style>
                                    </Grid.Resources>
                                    <ScrollViewer VerticalContentAlignment="Stretch" VerticalAlignment="Stretch" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto">
                                        <TextBox Text="{Binding ErrorText}" TextBlock.LineHeight="20" TextBlock.LineStackingStrategy="BlockLineHeight" />
                                    </ScrollViewer>
                                </Grid>
                            </avalonDock:LayoutAnchorable>
                        </avalonDock:LayoutAnchorGroup>
                    </avalonDock:LayoutAnchorSide>
                </avalonDock:LayoutRoot.BottomSide>
            </avalonDock:LayoutRoot>
        </avalonDock:DockingManager>
        <TextBlock Grid.Row="2" x:Name="OverallStatusTextbox" Text=" " Margin="5" ToolTip="{Binding Text, ElementName=OverallStatusTextbox}"/>
    </Grid>
</Window>